---
openapi: 3.0.1
info:
  title: backend-1.0-SNAPSHOT.war
  version: "1.0"
servers:
  - url: http://localhost:8080/
    description: BookStore Backend Server
paths:
  /api/book:
    get:
      summary: Get a book by its id
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Book Not Found
        "200":
          description: Book found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      summary: Update all details of an existing book
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "204":
          description: Book is not updated as id is illegal.
        "200":
          description: Book updated and returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    post:
      summary: Create a book
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book created, URI to it is returned in header "location"
    delete:
      summary: Delete a book by its id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Book cannot be removed.
        "200":
          description: The book is removed, a message about this is returned
          content:
            text/plain:
              schema:
                type: string
  /api/book/all:
    get:
      summary: Get all books
      responses:
        "200":
          description: Return all books in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /api/delivery/option:
    get:
      summary: Get a delivery option by its id
      parameters:
        - name: id
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Delivery option is not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryOption"
    put:
      summary: Update an existing delivery option
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryOption"
      responses:
        "200":
          description: Delivery Option updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryOption"
    post:
      summary: Create a delivery Option
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryOption"
      responses:
        "201":
          description: Delivery option created, URI to it is returned in header "location"
    delete:
      summary: Delete a delivery option by its id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Failed to delete this delivery option
        "200":
          description: Delivery option deleted, a message about this is returned
          content:
            text/plain:
              schema:
                type: string
  /api/delivery/option/all:
    get:
      summary: Get all delivery options in an array
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeliveryOption"
  /api/new:
    get:
      summary: Get a home new by its id
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Home new is not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeNew"
    put:
      summary: Update an existing home new
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HomeNew"
      responses:
        "204":
          description: Failed to update this home new
        "200":
          description: Home new updated and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeNew"
    post:
      summary: Create a home new
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HomeNew"
      responses:
        "201":
          description: Home new created, URI to it is returned in header "location"
    delete:
      summary: Delete a home new by its id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Failed to delete this home new
        "200":
          description: Home new deleted, a message about this is returned
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/HomeNew"
  /api/new/all:
    get:
      summary: Get all home news in an array
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HomeNew"
  /api/order:
    get:
      summary: Get an order by its id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Order not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    put:
      summary: Update an order
      security:
        - bearerAuth: []
      description:
        An order must have at least one book, which's amount is greater
        than 0, and it must have selected a delivery option.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "204":
          description: Order is not updated due to its validity.
        "200":
          description: Order updated and returned
    post:
      summary: Create an order
      description:
        Order's date is always overwritten in backend. An order must have
        at least one book,which's amount is greater than 0, and it must have selected
        a delivery option. (Note that this POST request is supposed to be protected by
        authorisation mechanism. Not using authentication and authorisation mechanism
        is only for demo purpose.)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "204":
          description: Order cannot be created due to its validity.
        "200":
          description:
            Order created and returned, this is intended so that the user
            can review the order that he/she has created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      summary: Delete an order by its id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: Failed to delete the order
        "200":
          description: Order deleted
  /api/order/all:
    get:
      summary: Get all orders in an array
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /api/role:
    get:
      summary: Return the role (or groups) of client based on the given JWT
      responses:
        "401":
          description: JWT is invalid (e.g., signed by different private key)
        "200":
          description: Return role or groups of this client
          content:
            text/plain: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A JWT generated with role "admin"
  schemas:
    HomeNew:
      required:
        - content
        - date
        - title
      type: object
      properties:
        content:
          type: string
          nullable: false
        date:
          format: date
          type: string
          nullable: false
        id:
          format: int64
          type: integer
        title:
          type: string
          nullable: false
    DeliveryOption:
      required:
        - name
        - price
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        price:
          format: double
          type: number
          nullable: false
    Book:
      required:
        - price
        - title
      type: object
      properties:
        author:
          type: string
        content:
          type: string
        date:
          format: date
          type: string
        id:
          format: int64
          type: integer
        img:
          type: string
        price:
          format: double
          type: number
          nullable: false
        title:
          type: string
          nullable: false
    Address:
      required:
        - city
        - county
        - firstLine
        - postCode
      type: object
      properties:
        city:
          type: string
          nullable: false
        county:
          type: string
          nullable: false
        firstLine:
          type: string
          nullable: false
        postCode:
          type: string
          nullable: false
        secondLine:
          type: string
    BookOrder:
      type: object
      properties:
        amount:
          format: int32
          type: integer
        book:
          $ref: "#/components/schemas/Book"
    Order:
      required:
        - address
        - date
        - deliveryOption
        - firstName
        - lastName
        - price
      type: object
      properties:
        address:
          allOf:
            - $ref: "#/components/schemas/Address"
            - nullable: false
        booksOnOrder:
          type: array
          items:
            $ref: "#/components/schemas/BookOrder"
        date:
          format: date
          type: string
          nullable: false
        deliveryOption:
          allOf:
            - $ref: "#/components/schemas/DeliveryOption"
            - nullable: false
        firstName:
          type: string
          nullable: false
        lastName:
          type: string
          nullable: false
        orderId:
          format: int64
          type: integer
        price:
          format: double
          type: number
          nullable: false
